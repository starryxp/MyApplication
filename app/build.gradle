apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

static def releaseTime() {
    return new Date().format("yyyyMMdd-HHmm", TimeZone.getTimeZone("Asia/Shanghai"))
}

def API_ENVIRONMENT_DEV = "\"dev\""
def API_ENVIRONMENT_RELEASE = "\"release\""

android {

//    signingConfigs {
//        release {
//            keyAlias 'saickeymanager'
//            keyPassword KEY_PASSWORD
//            storeFile file('../../saickey.jks')
//            storePassword KEYSTORE_PASSWORD
//        }
//        debug {
//            keyAlias 'passenger'
//            keyPassword 'saicAnroidPassenger'
//            storeFile file('passenger')
//            storePassword 'saicAnroidPassenger'
//        }
//    }

    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.xiaopeng.myapplication"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        release {
//            signingConfig signingConfigs.release
            //代码混淆
            minifyEnabled true
            //压缩包优化
            zipAlignEnabled true
            //移除未调用的资源文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "API_ENBIRONMENT", "${API_ENVIRONMENT_RELEASE}")
        }
        debug {
//            signingConfig signingConfigs.debug
            debuggable true
            buildConfigField("String", "API_ENBIRONMENT", "${API_ENVIRONMENT_DEV}")
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "app_${variant.buildType.name}_VC${defaultConfig.versionCode}_VN${defaultConfig.versionName}_${releaseTime()}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //突破64K方法数限制
    implementation 'com.android.support:multidex:1.0.3'
    //Log
    implementation 'com.orhanobut:logger:2.2.0'
    //eventBus
    implementation 'org.greenrobot:eventbus:3.1.1'
    //RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    //这是给RxJava2.x版本用
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    //RxPermissions
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'
    //RecyclerViewAdapter
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.22'
    //rxjava生命周期管理
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
    //glide
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    //添加leakcanary相关的依赖
    //在release和test版本中，使用的是LeakCanary的no-op版本，也就是没有实际代码和操作的Wrapper版本，只包含LeakCanary和RefWatcher类的空实现，这样不会对生成的APK包体积和应用性能造成影响
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}
